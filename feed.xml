<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.1">Jekyll</generator><link href="https://cedricthibault.cloud/feed.xml" rel="self" type="application/atom+xml" /><link href="https://cedricthibault.cloud/" rel="alternate" type="text/html" /><updated>2023-01-04T20:37:30-05:00</updated><id>https://cedricthibault.cloud/feed.xml</id><title type="html">Protect your Cloud</title><subtitle>Welcome in my blog. This website is focused on Cloud security resources and news.
</subtitle><author><name>Cedric Thibault</name><email>cedric.thibault@gmail.com</email></author><entry><title type="html">Putting an end to public S3 buckets (at scale)</title><link href="https://cedricthibault.cloud/technical/2023/01/01/s3-block-public-access.html" rel="alternate" type="text/html" title="Putting an end to public S3 buckets (at scale)" /><published>2023-01-01T00:00:00-05:00</published><updated>2023-01-01T00:00:00-05:00</updated><id>https://cedricthibault.cloud/technical/2023/01/01/s3-block-public-access</id><content type="html" xml:base="https://cedricthibault.cloud/technical/2023/01/01/s3-block-public-access.html"><![CDATA[<div class="lang">
  <ul>
    
      <li><a class="" href="/fr/technical/2023/01/01/s3-bloquer-acces-public.html"></a></li>
    
      <li><a class="" href="/technical/2023/01/01/s3-block-public-access.html"></a></li>
    
  </ul>
</div>
<h1 id="tldr">TL;DR</h1>
<p>Despite numerous safeguards added by AWS to secure S3 buckets, many data breach incidents continue to occur due to client configuration errors. This article aims to detail the implementation of prevention mechanisms that protect against accidental bucket exposure in an AWS organization.</p>
<h1 id="introduction">Introduction</h1>
<p>Actually I should title this article, no more unwanted public S3 buckets! In a large AWS organization, it is likely that exposing buckets is a necessity: static website, provision of public web assets, repository area offered to customers, etc…
Although these use cases are often exceptions, this is precisely what is complicated to manage, the exception.</p>

<h1 id="the-simple-way">The simple way</h1>
<p>To protect yourself against the exposure of an S3 bucket by mistake, nothing could be simpler: you just need to set up the <a href="https://awscli.amazonaws.com/v2/documentation/api/latest/reference/s3control/put-public-access-block.html">S3 Block Public Access</a> parameter at the account level, and all the buckets present in this AWS account will be de facto private (i.e. exposed only to users or roles belonging to the organization, the account or explicitly mentioned). Of course, the ideal way to set this parameter is to automate it when creating each new AWS account, for example by using the solution AWS <a href="https://medium.com/r/?url=https%3A%2F%2Faws.amazon.com%2Fsolutions%2Fimplementations%2Fcustomizations-for-aws-control-tower%2F">Customizations</a>.</p>

<p><em>Note that this Block Public Access parameter can be defined at the account level but also at the buckets level.</em></p>

<h1 id="protect-the-simple-way">Protect the simple way</h1>
<p>The problem with Block Public Access is that any administrator or user with the appropriate permission can deactivate this setting to publish a public bucket in an emergency (the famous emergency that does not last and is without consequence…). To protect against the deactivation of this parameter, the best way to act is to define a Service Control Policy (SCP) at the AWS Organization level that will prevent any change to this parameter.</p>

<noscript><pre>400: Invalid request</pre></noscript>
<script src="https://gist.github.com/6275fed69dca96f168cb193a36d0cd86.js"> </script>

<p>This SCP will be applied across the organization’s OUs with the exception of a dedicated OU for public resource exhibitor accounts.</p>

<p><img src="/assets/images/bloc-public-access-organization.jpg" alt="&quot;alt text&quot;" title="Exemple d'une organisation limitant les expositions publiques" /></p>

<p>Accounts that do not inherit this SCP will be able to expose public buckets while private buckets in these same accounts will be able to benefit from the Block Public Access parameter at the level of the bucket itself.</p>

<h1 id="welcome-the-new-sherif-in-town">Welcome the new sherif in town</h1>
<p>In theory, with this SCP you reduce the risk considerably because only accounts that need to expose public buckets will be allowed to do so.
However, there is still a risk that in these few accounts an error will expose a bucket containing confidential data. For this reason, it is interesting to check that the buckets exposed to the public are indeed those that have been identified as containing data that are themselves public.
For this, tags will be useful. Indeed, in an agile DevOps model, security is partly assumed by the developers who create their infrastructures. Therefore, if a developer wants to expose a public bucket, we first want to make sure that he is aware of what he is doing by asking him to define a “public” tag on the bucket. By asking them to do this extra step, we remove any risk of misunderstanding on the part of the developer exposing his bucket without realizing the risk.</p>

<p><img src="/assets/images/bloc-public-access-automation.jpg" alt="&quot;alt text&quot;" title="Architecture de notre contrôle de remédiation" /></p>

<p>Associated to the tag, it is a Lambda that will check after each change on an S3 bucket (via EventBridge) the exposure status of the bucket and compare it to the tag associated (or not) to this bucket. In our example, we use a tag whose key is “protectyourcloud:classification-securite-donnees” and the value must be “public” to allow the bucket to remain public.</p>

<noscript><pre>400: Invalid request</pre></noscript>
<script src="https://gist.github.com/d60ceeb74f25552e6cefa3648e08bcc8.js"> </script>

<h1 id="conclusion">Conclusion</h1>
<p>Implementing a preventive and reactive control is the best way to complement the detection usually done through your CSPM or Config rules.</p>

<p>The most important thing is to always include exception cases in your protection policies via specific controls, often linked to tags. In addition, the strict implementation of a tag associated with public buckets will make it easy to track the inventory of exposed buckets.</p>

<!--more-->]]></content><author><name>Cedric Thibault</name><email>cedric.thibault@gmail.com</email></author><category term="Technical" /><category term="s3" /><category term="aws" /><category term="public" /><summary type="html"><![CDATA[TL;DR Despite numerous safeguards added by AWS to secure S3 buckets, many data breach incidents continue to occur due to client configuration errors. This article aims to detail the implementation of prevention mechanisms that protect against accidental bucket exposure in an AWS organization. Introduction Actually I should title this article, no more unwanted public S3 buckets! In a large AWS organization, it is likely that exposing buckets is a necessity: static website, provision of public web assets, repository area offered to customers, etc… Although these use cases are often exceptions, this is precisely what is complicated to manage, the exception. The simple way To protect yourself against the exposure of an S3 bucket by mistake, nothing could be simpler: you just need to set up the S3 Block Public Access parameter at the account level, and all the buckets present in this AWS account will be de facto private (i.e. exposed only to users or roles belonging to the organization, the account or explicitly mentioned). Of course, the ideal way to set this parameter is to automate it when creating each new AWS account, for example by using the solution AWS Customizations. Note that this Block Public Access parameter can be defined at the account level but also at the buckets level. Protect the simple way The problem with Block Public Access is that any administrator or user with the appropriate permission can deactivate this setting to publish a public bucket in an emergency (the famous emergency that does not last and is without consequence…). To protect against the deactivation of this parameter, the best way to act is to define a Service Control Policy (SCP) at the AWS Organization level that will prevent any change to this parameter. 400: Invalid request This SCP will be applied across the organization’s OUs with the exception of a dedicated OU for public resource exhibitor accounts. Accounts that do not inherit this SCP will be able to expose public buckets while private buckets in these same accounts will be able to benefit from the Block Public Access parameter at the level of the bucket itself. Welcome the new sherif in town In theory, with this SCP you reduce the risk considerably because only accounts that need to expose public buckets will be allowed to do so. However, there is still a risk that in these few accounts an error will expose a bucket containing confidential data. For this reason, it is interesting to check that the buckets exposed to the public are indeed those that have been identified as containing data that are themselves public. For this, tags will be useful. Indeed, in an agile DevOps model, security is partly assumed by the developers who create their infrastructures. Therefore, if a developer wants to expose a public bucket, we first want to make sure that he is aware of what he is doing by asking him to define a “public” tag on the bucket. By asking them to do this extra step, we remove any risk of misunderstanding on the part of the developer exposing his bucket without realizing the risk. Associated to the tag, it is a Lambda that will check after each change on an S3 bucket (via EventBridge) the exposure status of the bucket and compare it to the tag associated (or not) to this bucket. In our example, we use a tag whose key is “protectyourcloud:classification-securite-donnees” and the value must be “public” to allow the bucket to remain public. 400: Invalid request Conclusion Implementing a preventive and reactive control is the best way to complement the detection usually done through your CSPM or Config rules. The most important thing is to always include exception cases in your protection policies via specific controls, often linked to tags. In addition, the strict implementation of a tag associated with public buckets will make it easy to track the inventory of exposed buckets.]]></summary></entry><entry><title type="html">Welcome</title><link href="https://cedricthibault.cloud/2023/01/01/welcome.html" rel="alternate" type="text/html" title="Welcome" /><published>2023-01-01T00:00:00-05:00</published><updated>2023-01-01T00:00:00-05:00</updated><id>https://cedricthibault.cloud/2023/01/01/welcome</id><content type="html" xml:base="https://cedricthibault.cloud/2023/01/01/welcome.html"><![CDATA[<div class="lang">
  <ul>
    
      <li><a class="" href="/fr/2023/01/01/bienvenue.html"></a></li>
    
      <li><a class="" href="/2023/01/01/welcome.html"></a></li>
    
  </ul>
</div>
<p>Welcome to my blog, resolution of the year 2023 ;-) If you are not interested in the news around the Cloud, then clearly you are in the wrong place..</p>

<!--more-->]]></content><author><name>Cedric Thibault</name><email>cedric.thibault@gmail.com</email></author><summary type="html"><![CDATA[Welcome to my blog, resolution of the year 2023 ;-) If you are not interested in the news around the Cloud, then clearly you are in the wrong place..]]></summary></entry><entry><title type="html">Bienvenue</title><link href="https://cedricthibault.cloud/fr/2023/01/01/bienvenue.html" rel="alternate" type="text/html" title="Bienvenue" /><published>2023-01-01T00:00:00-05:00</published><updated>2023-01-01T00:00:00-05:00</updated><id>https://cedricthibault.cloud/fr/2023/01/01/bienvenue</id><content type="html" xml:base="https://cedricthibault.cloud/fr/2023/01/01/bienvenue.html"><![CDATA[<div class="lang">
  <ul>
    
      <li><a class="" href="/fr/2023/01/01/bienvenue.html"></a></li>
    
      <li><a class="" href="/2023/01/01/welcome.html"></a></li>
    
  </ul>
</div>
<p>Bienvenue sur mon blog, résolution de l’année 2023 ;-) Si vous n’êtes pas intéressés par l’actualité autour du Cloud, alors clairement vous vous êtes trompé d’endroit..</p>

<!--more-->]]></content><author><name>Cedric Thibault</name><email>cedric.thibault@gmail.com</email></author><category term="fr" /><summary type="html"><![CDATA[Bienvenue sur mon blog, résolution de l’année 2023 ;-) Si vous n’êtes pas intéressés par l’actualité autour du Cloud, alors clairement vous vous êtes trompé d’endroit..]]></summary></entry><entry><title type="html">En finir avec les buckets S3 publics (at scale)</title><link href="https://cedricthibault.cloud/fr/technical/2023/01/01/s3-bloquer-acces-public.html" rel="alternate" type="text/html" title="En finir avec les buckets S3 publics (at scale)" /><published>2023-01-01T00:00:00-05:00</published><updated>2023-01-01T00:00:00-05:00</updated><id>https://cedricthibault.cloud/fr/technical/2023/01/01/s3-bloquer-acces-public</id><content type="html" xml:base="https://cedricthibault.cloud/fr/technical/2023/01/01/s3-bloquer-acces-public.html"><![CDATA[<div class="lang">
  <ul>
    
      <li><a class="" href="/fr/technical/2023/01/01/s3-bloquer-acces-public.html"></a></li>
    
      <li><a class="" href="/technical/2023/01/01/s3-block-public-access.html"></a></li>
    
  </ul>
</div>
<h1 id="tldr">TL;DR</h1>
<p>Malgré de nombreuses mesures de protection ajoutées par AWS pour sécuriser les buckets S3, de nombreux incidents de brèches de données continuent à se produire par erreur de configuration du client. Cet article vise à vous détailler la mise en place de mécanismes de prévention qui permettent de se protéger contre une exposition accidentelle de bucket dans une organisation AWS.</p>
<h1 id="introduction">Introduction</h1>
<p>En réalité je devrais plutôt titrer cet article, en finir avec les buckets S3 publics non désirés! Dans une organisation AWS d’importance, il est probable que l’exposition de buckets soit une nécessité: site web statique, mise à disposition d’actifs Web publics, zone de dépôt proposée aux clients, etc…
Bien que ces cas d’usages soient souvent des exceptions, c’est justement ce qui est compliqué à gérer, l’exception.</p>

<h1 id="la-solution-simple">La solution simple</h1>
<p>Pour se protéger contre l’exposition par erreur d’un bucket S3, rien de plus simple, il suffit de mettre en place le paramètre <a href="https://awscli.amazonaws.com/v2/documentation/api/latest/reference/s3control/put-public-access-block.html">S3 Block Public Access</a> au niveau du compte, et tous les buckets qui seront présents dans ce compte AWS seront de facto privés (c’est à dire exposés seulement à des utilisateurs ou rôles appartenant à l’organisation, au compte ou explicitement cités). Bien sûr, pour la mise en place de ce paramètre, l’idéal est de l’automatiser à la création de chaque nouveau compte AWS avec par exemple l’utilisation de la solution AWS <a href="https://medium.com/r/?url=https%3A%2F%2Faws.amazon.com%2Fsolutions%2Fimplementations%2Fcustomizations-for-aws-control-tower%2F">Customizations</a>.</p>

<p><em>À noter que ce paramètre de Block Public Access peut être défini au niveau du compte mais également au niveau des buckets.</em></p>
<h1 id="protéger-la-solution-simple">Protéger la solution simple</h1>
<p>Le problème du Block Public Access, c’est que n’importe quel administrateur ou utilisateur avec la permission appropriée peut désactiver ce paramètre pour publier en urgence un bucket public (la fameuse urgence qui ne dure pas et est sans conséquence…). Pour se protéger contre une désactivation du paramètre, la meilleure façon d’agir et de définir une Service Control Policy (SCP) au niveau de AWS Organization qui va permettre d’empêcher tout changement de ce paramètre.</p>

<noscript><pre>400: Invalid request</pre></noscript>
<script src="https://gist.github.com/6275fed69dca96f168cb193a36d0cd86.js"> </script>

<p>Cette SCP sera appliquée sur l’ensemble des OU de l’organisation à l’exception d’une OU dédiée pour les comptes exposants des ressources publiques.</p>

<p><img src="/assets/images/bloc-public-access-organization.jpg" alt="&quot;alt text&quot;" title="Exemple d'une organisation limitant les expositions publiques" /></p>

<p>Les comptes n’héritant pas de cette SCP pourront alors exposer des buckets publics tandis que les buckets privés dans ces même comptes pourront eux bénéficier du paramètre Block Public Access au niveau du bucket en soi.</p>

<h1 id="mettre-en-place-un-shérif-en-ville">Mettre en place un Shérif en ville</h1>
<p>En théorie, avec cette SCP vous venez réduire considérablement le risque car seul les comptes devant exposer des buckets publics seront autorisés à le faire.
Ceci dit, le risque que dans ces quelques comptes une erreur expose un bucket contenant des données confidentielles existe encore. Pour cela, il est intéressant de venir contrôler que les buckets exposés publics sont bien ceux qui ont été identifiés comme contenant des données qui sont elles même publiques.
Pour cela, les tags vont être utiles. En effet, dans un modèle DevOps agile, la sécurité vient en partie être assumée par les développeurs qui créent leurs infrastructures. Par conséquent, si un développeur veut exposer un bucket public, on veut auparavant s’assurer qu’il est conscient de ce qu’il fait en lui demandant de définir un tag “public” sur le bucket. En lui demandant cette étape supplémentaire, on vient supprimer tout risque de mauvaise compréhension de la part du développeur exposant son bucket sans se rendre compte du risque.</p>

<p><img src="/assets/images/bloc-public-access-automation.jpg" alt="&quot;alt text&quot;" title="Architecture de notre contrôle de remédiation" /></p>

<p>Associé au tag, c’est une Lambda qui va vérifier suite à chaque changement sur un bucket S3 (via EventBridge) le statut d’exposition du bucket et le comparer au tag associé (ou non) à ce bucket. Dans notre exemple, nous utilisons un tag dont la clé est “protectyourcloud:classification-securite-donnees” et la valeur doit être à “public” pour permettre au bucket de rester public.</p>

<noscript><pre>400: Invalid request</pre></noscript>
<script src="https://gist.github.com/d60ceeb74f25552e6cefa3648e08bcc8.js"> </script>

<h1 id="conclusion">Conclusion</h1>
<p>La mise en place d’un contrôle préventif et d’un contrôle de réaction est la meilleure façon de compléter la détection effectuée généralement par le biais de votre CSPM ou de vos règles Config.
Le plus important est de toujours inclure dans vos stratégies de protection les cas d’exception via des contrôles spécifiques, souvent liés aux tags. De plus, la mise en place stricte d’un tag associé aux buckets publics va permettre de suivre facilement l’inventaire des buckets exposés.</p>

<!--more-->]]></content><author><name>Cedric Thibault</name><email>cedric.thibault@gmail.com</email></author><category term="Technical" /><category term="s3" /><category term="aws" /><category term="public" /><summary type="html"><![CDATA[TL;DR Malgré de nombreuses mesures de protection ajoutées par AWS pour sécuriser les buckets S3, de nombreux incidents de brèches de données continuent à se produire par erreur de configuration du client. Cet article vise à vous détailler la mise en place de mécanismes de prévention qui permettent de se protéger contre une exposition accidentelle de bucket dans une organisation AWS. Introduction En réalité je devrais plutôt titrer cet article, en finir avec les buckets S3 publics non désirés! Dans une organisation AWS d’importance, il est probable que l’exposition de buckets soit une nécessité: site web statique, mise à disposition d’actifs Web publics, zone de dépôt proposée aux clients, etc… Bien que ces cas d’usages soient souvent des exceptions, c’est justement ce qui est compliqué à gérer, l’exception. La solution simple Pour se protéger contre l’exposition par erreur d’un bucket S3, rien de plus simple, il suffit de mettre en place le paramètre S3 Block Public Access au niveau du compte, et tous les buckets qui seront présents dans ce compte AWS seront de facto privés (c’est à dire exposés seulement à des utilisateurs ou rôles appartenant à l’organisation, au compte ou explicitement cités). Bien sûr, pour la mise en place de ce paramètre, l’idéal est de l’automatiser à la création de chaque nouveau compte AWS avec par exemple l’utilisation de la solution AWS Customizations. À noter que ce paramètre de Block Public Access peut être défini au niveau du compte mais également au niveau des buckets. Protéger la solution simple Le problème du Block Public Access, c’est que n’importe quel administrateur ou utilisateur avec la permission appropriée peut désactiver ce paramètre pour publier en urgence un bucket public (la fameuse urgence qui ne dure pas et est sans conséquence…). Pour se protéger contre une désactivation du paramètre, la meilleure façon d’agir et de définir une Service Control Policy (SCP) au niveau de AWS Organization qui va permettre d’empêcher tout changement de ce paramètre. 400: Invalid request Cette SCP sera appliquée sur l’ensemble des OU de l’organisation à l’exception d’une OU dédiée pour les comptes exposants des ressources publiques. Les comptes n’héritant pas de cette SCP pourront alors exposer des buckets publics tandis que les buckets privés dans ces même comptes pourront eux bénéficier du paramètre Block Public Access au niveau du bucket en soi. Mettre en place un Shérif en ville En théorie, avec cette SCP vous venez réduire considérablement le risque car seul les comptes devant exposer des buckets publics seront autorisés à le faire. Ceci dit, le risque que dans ces quelques comptes une erreur expose un bucket contenant des données confidentielles existe encore. Pour cela, il est intéressant de venir contrôler que les buckets exposés publics sont bien ceux qui ont été identifiés comme contenant des données qui sont elles même publiques. Pour cela, les tags vont être utiles. En effet, dans un modèle DevOps agile, la sécurité vient en partie être assumée par les développeurs qui créent leurs infrastructures. Par conséquent, si un développeur veut exposer un bucket public, on veut auparavant s’assurer qu’il est conscient de ce qu’il fait en lui demandant de définir un tag “public” sur le bucket. En lui demandant cette étape supplémentaire, on vient supprimer tout risque de mauvaise compréhension de la part du développeur exposant son bucket sans se rendre compte du risque. Associé au tag, c’est une Lambda qui va vérifier suite à chaque changement sur un bucket S3 (via EventBridge) le statut d’exposition du bucket et le comparer au tag associé (ou non) à ce bucket. Dans notre exemple, nous utilisons un tag dont la clé est “protectyourcloud:classification-securite-donnees” et la valeur doit être à “public” pour permettre au bucket de rester public. 400: Invalid request Conclusion La mise en place d’un contrôle préventif et d’un contrôle de réaction est la meilleure façon de compléter la détection effectuée généralement par le biais de votre CSPM ou de vos règles Config. Le plus important est de toujours inclure dans vos stratégies de protection les cas d’exception via des contrôles spécifiques, souvent liés aux tags. De plus, la mise en place stricte d’un tag associé aux buckets publics va permettre de suivre facilement l’inventaire des buckets exposés.]]></summary></entry></feed>