<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.1">Jekyll</generator><link href="https://cedricthibault.cloud/feed.xml" rel="self" type="application/atom+xml" /><link href="https://cedricthibault.cloud/" rel="alternate" type="text/html" /><updated>2023-01-02T17:48:05-05:00</updated><id>https://cedricthibault.cloud/feed.xml</id><title type="html">Protect your Cloud</title><subtitle>Welcome in my blog. This website is focused on Cloud security resources and news.
</subtitle><author><name>Cedric Thibault</name><email>cedric.thibault@gmail.com</email></author><entry><title type="html">En finir avec les buckets S3 publics (at scale)</title><link href="https://cedricthibault.cloud/technical/2023/01/01/s3-block-public-access.html" rel="alternate" type="text/html" title="En finir avec les buckets S3 publics (at scale)" /><published>2023-01-01T00:00:00-05:00</published><updated>2023-01-01T00:00:00-05:00</updated><id>https://cedricthibault.cloud/technical/2023/01/01/s3-block-public-access</id><content type="html" xml:base="https://cedricthibault.cloud/technical/2023/01/01/s3-block-public-access.html"><![CDATA[<h1 id="tldr">TL;DR</h1>
<p>Malgré de nombreuses mesures de protection ajoutées par AWS pour sécuriser les buckets S3, de nombreux incidents de brèches de données continuent à se produire par erreur de configuration du client. Cet article vise à vous détailler la mise en place de mécanismes de prévention qui permettent de se protéger contre une exposition accidentelle de bucket dans une organisation AWS.</p>
<h1 id="introduction">Introduction</h1>
<p>En réalité je devrais plutôt titrer cet article, en finir avec les buckets S3 publics non désirés! Dans une organisation AWS d’importance, il est probable que l’exposition de buckets soit une nécessité: site web statique, mise à disposition d’actifs Web publics, zone de dépôt proposée aux clients, etc…
Bien que ces cas d’usages soient souvent des exceptions, c’est justement ce qui est compliqué à gérer, l’exception.</p>

<h1 id="la-solution-simple">La solution simple</h1>
<p>Pour se protéger contre l’exposition par erreur d’un bucket S3, rien de plus simple, il suffit de mettre en place le paramètre <a href="https://awscli.amazonaws.com/v2/documentation/api/latest/reference/s3control/put-public-access-block.html">S3 Block Public Access</a> au niveau du compte, et tous les buckets qui seront présents dans ce compte AWS seront de facto privés (c’est à dire exposés seulement à des utilisateurs ou rôles appartenant à l’organisation, au compte ou explicitement cités). Bien sûr, pour la mise en place de ce paramètre, l’idéal est de l’automatiser à la création de chaque nouveau compte AWS avec par exemple l’utilisation de la solution AWS <a href="https://medium.com/r/?url=https%3A%2F%2Faws.amazon.com%2Fsolutions%2Fimplementations%2Fcustomizations-for-aws-control-tower%2F">Customizations</a>.</p>

<p><em>À noter que ce paramètre de Block Public Access peut être défini au niveau du compte mais également au niveau des buckets.</em></p>
<h1 id="protéger-la-solution-simple">Protéger la solution simple</h1>
<p>Le problème du Block Public Access, c’est que n’importe quel administrateur ou utilisateur avec la permission appropriée peut désactiver ce paramètre pour publier en urgence un bucket public (la fameuse urgence qui ne dure pas et est sans conséquence…). Pour se protéger contre une désactivation du paramètre, la meilleure façon d’agir et de définir une Service Control Policy (SCP) au niveau de AWS Organization qui va permettre d’empêcher tout changement de ce paramètre.</p>

<noscript><pre>400: Invalid request</pre></noscript>
<script src="https://gist.github.com/6275fed69dca96f168cb193a36d0cd86.js"> </script>

<p>Cette SCP sera appliquée sur l’ensemble des OU de l’organisation à l’exception d’une OU dédiée pour les comptes exposants des ressources publiques.</p>

<p><img src="/assets/images/bloc-public-access-organization.jpg" alt="&quot;alt text&quot;" title="Exemple d'une organisation limitant les expositions publiques" /></p>

<p>Les comptes n’héritant pas de cette SCP pourront alors exposer des buckets publics tandis que les buckets privés dans ces même comptes pourront eux bénéficier du paramètre Block Public Access au niveau du bucket en soi.</p>

<h1 id="mettre-en-place-un-shérif-en-ville">Mettre en place un Shérif en ville</h1>
<p>En théorie, avec cette SCP vous venez réduire considérablement le risque car seul les comptes devant exposer des buckets publics seront autorisés à le faire.
Ceci dit, le risque que dans ces quelques comptes une erreur expose un bucket contenant des données confidentielles existe encore. Pour cela, il est intéressant de venir contrôler que les buckets exposés publics sont bien ceux qui ont été identifiés comme contenant des données qui sont elles même publiques.
Pour cela, les tags vont être utiles. En effet, dans un modèle DevOps agile, la sécurité vient en partie être assumée par les développeurs qui créent leurs infrastructures. Par conséquent, si un développeur veut exposer un bucket public, on veut auparavant s’assurer qu’il est conscient de ce qu’il fait en lui demandant de définir un tag “public” sur le bucket. En lui demandant cette étape supplémentaire, on vient supprimer tout risque de mauvaise compréhension de la part du développeur exposant son bucket sans se rendre compte du risque.</p>

<p><img src="/assets/images/bloc-public-access-automation.jpg" alt="&quot;alt text&quot;" title="Architecture de notre contrôle de remédiation" /></p>

<p>Associé au tag, c’est une Lambda qui va vérifier suite à chaque changement sur un bucket S3 (via EventBridge) le statut d’exposition du bucket et le comparer au tag associé (ou non) à ce bucket. Dans notre exemple, nous utilisons un tag dont la clé est “protectyourcloud:classification-securite-donnees” et la valeur doit être à “public” pour permettre au bucket de rester public.</p>

<noscript><pre>400: Invalid request</pre></noscript>
<script src="https://gist.github.com/d60ceeb74f25552e6cefa3648e08bcc8.js"> </script>

<h1 id="conclusion">Conclusion</h1>
<p>La mise en place d’un contrôle préventif et d’un contrôle de réaction est la meilleure façon de compléter la détection effectuée généralement par le biais de votre CSPM ou de vos règles Config.
Le plus important est de toujours inclure dans vos stratégies de protection les cas d’exception via des contrôles spécifiques, souvent liés aux tags. De plus, la mise en place stricte d’un tag associé aux buckets publics va permettre de suivre facilement l’inventaire des buckets exposés.</p>

<!--more-->]]></content><author><name>Cedric Thibault</name><email>cedric.thibault@gmail.com</email></author><category term="Technical" /><category term="s3" /><category term="aws" /><category term="public" /><summary type="html"><![CDATA[TL;DR Malgré de nombreuses mesures de protection ajoutées par AWS pour sécuriser les buckets S3, de nombreux incidents de brèches de données continuent à se produire par erreur de configuration du client. Cet article vise à vous détailler la mise en place de mécanismes de prévention qui permettent de se protéger contre une exposition accidentelle de bucket dans une organisation AWS. Introduction En réalité je devrais plutôt titrer cet article, en finir avec les buckets S3 publics non désirés! Dans une organisation AWS d’importance, il est probable que l’exposition de buckets soit une nécessité: site web statique, mise à disposition d’actifs Web publics, zone de dépôt proposée aux clients, etc… Bien que ces cas d’usages soient souvent des exceptions, c’est justement ce qui est compliqué à gérer, l’exception. La solution simple Pour se protéger contre l’exposition par erreur d’un bucket S3, rien de plus simple, il suffit de mettre en place le paramètre S3 Block Public Access au niveau du compte, et tous les buckets qui seront présents dans ce compte AWS seront de facto privés (c’est à dire exposés seulement à des utilisateurs ou rôles appartenant à l’organisation, au compte ou explicitement cités). Bien sûr, pour la mise en place de ce paramètre, l’idéal est de l’automatiser à la création de chaque nouveau compte AWS avec par exemple l’utilisation de la solution AWS Customizations. À noter que ce paramètre de Block Public Access peut être défini au niveau du compte mais également au niveau des buckets. Protéger la solution simple Le problème du Block Public Access, c’est que n’importe quel administrateur ou utilisateur avec la permission appropriée peut désactiver ce paramètre pour publier en urgence un bucket public (la fameuse urgence qui ne dure pas et est sans conséquence…). Pour se protéger contre une désactivation du paramètre, la meilleure façon d’agir et de définir une Service Control Policy (SCP) au niveau de AWS Organization qui va permettre d’empêcher tout changement de ce paramètre. 400: Invalid request Cette SCP sera appliquée sur l’ensemble des OU de l’organisation à l’exception d’une OU dédiée pour les comptes exposants des ressources publiques. Les comptes n’héritant pas de cette SCP pourront alors exposer des buckets publics tandis que les buckets privés dans ces même comptes pourront eux bénéficier du paramètre Block Public Access au niveau du bucket en soi. Mettre en place un Shérif en ville En théorie, avec cette SCP vous venez réduire considérablement le risque car seul les comptes devant exposer des buckets publics seront autorisés à le faire. Ceci dit, le risque que dans ces quelques comptes une erreur expose un bucket contenant des données confidentielles existe encore. Pour cela, il est intéressant de venir contrôler que les buckets exposés publics sont bien ceux qui ont été identifiés comme contenant des données qui sont elles même publiques. Pour cela, les tags vont être utiles. En effet, dans un modèle DevOps agile, la sécurité vient en partie être assumée par les développeurs qui créent leurs infrastructures. Par conséquent, si un développeur veut exposer un bucket public, on veut auparavant s’assurer qu’il est conscient de ce qu’il fait en lui demandant de définir un tag “public” sur le bucket. En lui demandant cette étape supplémentaire, on vient supprimer tout risque de mauvaise compréhension de la part du développeur exposant son bucket sans se rendre compte du risque. Associé au tag, c’est une Lambda qui va vérifier suite à chaque changement sur un bucket S3 (via EventBridge) le statut d’exposition du bucket et le comparer au tag associé (ou non) à ce bucket. Dans notre exemple, nous utilisons un tag dont la clé est “protectyourcloud:classification-securite-donnees” et la valeur doit être à “public” pour permettre au bucket de rester public. 400: Invalid request Conclusion La mise en place d’un contrôle préventif et d’un contrôle de réaction est la meilleure façon de compléter la détection effectuée généralement par le biais de votre CSPM ou de vos règles Config. Le plus important est de toujours inclure dans vos stratégies de protection les cas d’exception via des contrôles spécifiques, souvent liés aux tags. De plus, la mise en place stricte d’un tag associé aux buckets publics va permettre de suivre facilement l’inventaire des buckets exposés.]]></summary></entry><entry><title type="html">Welcome</title><link href="https://cedricthibault.cloud/2023/01/01/welcome.html" rel="alternate" type="text/html" title="Welcome" /><published>2023-01-01T00:00:00-05:00</published><updated>2023-01-01T00:00:00-05:00</updated><id>https://cedricthibault.cloud/2023/01/01/welcome</id><content type="html" xml:base="https://cedricthibault.cloud/2023/01/01/welcome.html"><![CDATA[<p>Bienvenue sur mon blog, résolution de l’année 2023 ;-) Si vous n’êtes pas intéressés par l’actualité autour du Cloud, alors clairement vous vous êtes trompé d’endroit..</p>

<!--more-->]]></content><author><name>Cedric Thibault</name><email>cedric.thibault@gmail.com</email></author><summary type="html"><![CDATA[Bienvenue sur mon blog, résolution de l’année 2023 ;-) Si vous n’êtes pas intéressés par l’actualité autour du Cloud, alors clairement vous vous êtes trompé d’endroit..]]></summary></entry></feed>